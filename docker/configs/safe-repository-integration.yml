version: '3.8'

# Safe Repository Integration with Comprehensive Monitoring
# Multi-layered safety system for agent integration work

services:
  # Main integration agent with enhanced monitoring
  safe-integration-agent:
    build:
      context: ../agents
      dockerfile: Dockerfile
    container_name: safe-integration-agent
    environment:
      - AGENT_NAME=repository-integration
      - AGENT_ROLE=repository-integration
      - AGENT_ID=safe-integration
      - WORKSPACE_PATH=/workspace
      - SHARED_PATH=/shared
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - TARGET_REPO=${TARGET_REPO:-tdd_phase_4-decision-support}
      - PROJECT_NAME=repository-integration
      - PROJECT_DESCRIPTION="Integrating ${TARGET_REPO} into main codebase"
      - MAX_RESTARTS=15
      - TARGET_PASS_RATE=100
      - TEST_COMMAND="npm test"
      - SAFETY_MODE=enabled
      - AUTO_PAUSE_ON_VIOLATION=true
      - AGENT_PROMPT_FILE=/prompts/safe-repository-integration.md
    volumes:
      - ../../:/workspace
      - ../volumes/communication:/shared
      - ../agents/prompts:/prompts:ro
    networks:
      - safe-integration-network
    working_dir: /workspace
    command: ["./docker/agents/entrypoint-generic.sh"]
    restart: "no"
    depends_on:
      - integration-auth
      - integration-monitoring
      - boundary-monitor
      - compliance-monitor

  # Authentication service
  integration-auth:
    build:
      context: ../agents
      dockerfile: Dockerfile
    container_name: integration-auth
    environment:
      - AGENT_ROLE=auth-service
      - WORKSPACE_PATH=/workspace
    volumes:
      - ../../:/workspace
    networks:
      - safe-integration-network
    ports:
      - "3010:3000"
    command: ["node", "-e", "
      const http = require('http');
      const server = http.createServer((req, res) => {
        res.writeHead(200, {'Content-Type': 'application/json'});
        res.end(JSON.stringify({
          status: 'authenticated',
          agent: 'safe-repository-integration',
          safety_features: ['boundary_monitoring', 'compliance_tracking', 'rollback_ready'],
          timestamp: new Date().toISOString()
        }));
      });
      server.listen(3000, '0.0.0.0', () => {
        console.log('Safe Integration Auth service running on port 3000');
      });
    "]

  # Enhanced monitoring service with safety dashboard
  integration-monitoring:
    build:
      context: ../agents
      dockerfile: Dockerfile
    container_name: integration-monitoring
    environment:
      - AGENT_ROLE=monitoring-service
      - WORKSPACE_PATH=/workspace
      - TARGET_REPO=${TARGET_REPO:-tdd_phase_4-decision-support}
    volumes:
      - ../../:/workspace
      - ../volumes/communication:/shared
    networks:
      - safe-integration-network
    ports:
      - "3011:3000"
    command: ["node", "-e", "
      const http = require('http');
      const fs = require('fs');
      const path = require('path');
      
      const server = http.createServer((req, res) => {
        const url = req.url;
        
        if (url === '/status') {
          const statusFile = '/shared/status/repository-integration.json';
          if (fs.existsSync(statusFile)) {
            const status = JSON.parse(fs.readFileSync(statusFile, 'utf8'));
            res.writeHead(200, {'Content-Type': 'application/json'});
            res.end(JSON.stringify(status));
          } else {
            res.writeHead(404, {'Content-Type': 'application/json'});
            res.end(JSON.stringify({error: 'Status not found'}));
          }
        } else if (url === '/compliance') {
          const complianceFile = '/shared/compliance/state.json';
          if (fs.existsSync(complianceFile)) {
            const compliance = JSON.parse(fs.readFileSync(complianceFile, 'utf8'));
            res.writeHead(200, {'Content-Type': 'application/json'});
            res.end(JSON.stringify(compliance));
          } else {
            res.writeHead(404, {'Content-Type': 'application/json'});
            res.end(JSON.stringify({error: 'Compliance data not found'}));
          }
        } else if (url === '/violations') {
          const violationsFile = '/shared/violations/boundary-violations.log';
          if (fs.existsSync(violationsFile)) {
            const violations = fs.readFileSync(violationsFile, 'utf8');
            res.writeHead(200, {'Content-Type': 'text/plain'});
            res.end(violations);
          } else {
            res.writeHead(200, {'Content-Type': 'text/plain'});
            res.end('No violations detected');
          }
        } else {
          res.writeHead(200, {'Content-Type': 'text/html'});
          res.end(`
            <!DOCTYPE html>
            <html>
              <head>
                <title>Safe Integration Monitor</title>
                <meta http-equiv=\"refresh\" content=\"30\">
                <style>
                  body { font-family: monospace; margin: 40px; background: #f5f5f5; }
                  .header { background: #2c3e50; color: white; padding: 20px; border-radius: 5px; }
                  .section { background: white; margin: 20px 0; padding: 20px; border-radius: 5px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }
                  .good { color: #27ae60; }
                  .warning { color: #f39c12; }
                  .error { color: #e74c3c; }
                  .metric { display: inline-block; margin: 10px 20px 10px 0; }
                  .refresh { font-size: 12px; color: #7f8c8d; }
                </style>
              </head>
              <body>
                <div class=\"header\">
                  <h1>üõ°Ô∏è Safe Repository Integration Monitor</h1>
                  <p>Target Repository: ${process.env.TARGET_REPO || 'Not specified'}</p>
                </div>
                
                <div class=\"section\">
                  <h2>üìä Quick Status</h2>
                  <div class=\"metric\">
                    <strong>Integration Status:</strong> 
                    <span id=\"status\">Loading...</span>
                  </div>
                  <div class=\"metric\">
                    <strong>Compliance Score:</strong> 
                    <span id=\"compliance\">Loading...</span>
                  </div>
                  <div class=\"metric\">
                    <strong>Time:</strong> ${new Date().toISOString()}
                  </div>
                </div>
                
                <div class=\"section\">
                  <h2>üîó Safety Dashboard Links</h2>
                  <p><a href=\"/status\" target=\"_blank\">üìã Integration Status (JSON)</a></p>
                  <p><a href=\"/compliance\" target=\"_blank\">üõ°Ô∏è Compliance Report (JSON)</a></p>
                  <p><a href=\"/violations\" target=\"_blank\">‚ö†Ô∏è Boundary Violations Log</a></p>
                </div>
                
                <div class=\"section\">
                  <h2>üö® Safety Features Active</h2>
                  <ul>
                    <li>‚úÖ Real-time boundary monitoring</li>
                    <li>‚úÖ Compliance behavior analysis</li>
                    <li>‚úÖ Multi-level rollback system</li>
                    <li>‚úÖ Automatic violation detection</li>
                    <li>‚úÖ Resource usage tracking</li>
                  </ul>
                </div>
                
                <div class=\"section\">
                  <h2>üîß Emergency Controls</h2>
                  <p><strong>Pause Agent:</strong> <code>docker pause safe-integration-agent</code></p>
                  <p><strong>Emergency Rollback:</strong> <code>./docker/agents/safeguards/rollback-system.sh emergency</code></p>
                  <p><strong>Smart Rollback:</strong> <code>./docker/agents/safeguards/rollback-system.sh smart</code></p>
                </div>
                
                <p class=\"refresh\">üîÑ Auto-refresh every 30 seconds</p>
                
                <script>
                  async function updateStatus() {
                    try {
                      const response = await fetch('/status');
                      if (response.ok) {
                        const data = await response.json();
                        document.getElementById('status').textContent = data.status || 'Unknown';
                        document.getElementById('status').className = data.status === 'completed' ? 'good' : 'warning';
                      }
                    } catch (e) {
                      document.getElementById('status').textContent = 'Error loading';
                      document.getElementById('status').className = 'error';
                    }
                    
                    try {
                      const response = await fetch('/compliance');
                      if (response.ok) {
                        const data = await response.json();
                        const score = data.compliance_score || 'N/A';
                        document.getElementById('compliance').textContent = score + '%';
                        document.getElementById('compliance').className = 
                          score >= 90 ? 'good' : score >= 70 ? 'warning' : 'error';
                      }
                    } catch (e) {
                      document.getElementById('compliance').textContent = 'Error loading';
                      document.getElementById('compliance').className = 'error';
                    }
                  }
                  
                  // Update immediately and then every 10 seconds
                  updateStatus();
                  setInterval(updateStatus, 10000);
                </script>
              </body>
            </html>
          `);
        }
      });
      
      server.listen(3000, '0.0.0.0', () => {
        console.log('Safe Integration Monitoring dashboard running on port 3000');
        console.log('Dashboard: http://localhost:3011');
      });
    "]

  # Boundary violation monitor
  boundary-monitor:
    build:
      context: ../agents
      dockerfile: Dockerfile
    container_name: integration-boundary-monitor
    environment:
      - TARGET_REPO=${TARGET_REPO:-tdd_phase_4-decision-support}
      - AUTO_PAUSE_ON_VIOLATION=true
    volumes:
      - ../../:/workspace
      - ../volumes/communication:/shared
    networks:
      - safe-integration-network
    command: ["./docker/agents/safeguards/boundary-monitor.sh"]
    depends_on:
      - safe-integration-agent

  # Compliance behavior monitor
  compliance-monitor:
    build:
      context: ../agents
      dockerfile: Dockerfile
    container_name: integration-compliance-monitor
    environment:
      - AGENT_NAME=safe-integration
    volumes:
      - ../../:/workspace
      - ../volumes/communication:/shared
    networks:
      - safe-integration-network
    command: ["./docker/agents/safeguards/compliance-monitor.sh", "safe-integration"]
    depends_on:
      - safe-integration-agent

  # Safety backup service (continuous snapshots)
  safety-backup:
    build:
      context: ../agents
      dockerfile: Dockerfile
    container_name: integration-safety-backup
    environment:
      - BACKUP_INTERVAL=300  # 5 minutes
      - TARGET_REPO=${TARGET_REPO:-tdd_phase_4-decision-support}
    volumes:
      - ../../:/workspace
      - ../volumes/communication:/shared
    networks:
      - safe-integration-network
    command: ["bash", "-c", "
      echo 'üì∏ SAFETY BACKUP SERVICE';
      echo 'Creating periodic snapshots for rollback capability';
      echo '';
      
      mkdir -p /shared/safety-backups;
      
      while docker ps | grep -q safe-integration-agent; do
        TIMESTAMP=\\$(date +%Y%m%d-%H%M%S);
        BACKUP_DIR=\"/shared/safety-backups/auto-\\$TIMESTAMP\";
        
        echo \"üì∏ Creating safety backup: \\$BACKUP_DIR\";
        mkdir -p \"\\$BACKUP_DIR\";
        
        cd /workspace;
        
        # Backup critical files and state
        cp -r src \"\\$BACKUP_DIR/\" 2>/dev/null || true;
        cp package*.json \"\\$BACKUP_DIR/\" 2>/dev/null || true;
        cp tsconfig.json \"\\$BACKUP_DIR/\" 2>/dev/null || true;
        git log --oneline -10 > \"\\$BACKUP_DIR/recent-commits.txt\";
        git status --porcelain > \"\\$BACKUP_DIR/git-status.txt\";
        find src -name '*.ts' -o -name '*.tsx' | wc -l > \"\\$BACKUP_DIR/file-count.txt\";
        
        # Cleanup old backups (keep last 10)
        ls -1t /shared/safety-backups/ | tail -n +11 | while read old_backup; do
          rm -rf \"/shared/safety-backups/\\$old_backup\";
        done;
        
        sleep \\${BACKUP_INTERVAL:-300};
      done;
      
      echo 'üì∏ Safety backup service completed';
    "]

networks:
  safe-integration-network:
    driver: bridge

# Usage Instructions:
#
# 1. Set target repository:
#    export TARGET_REPO=tdd_phase_4-decision-support
#
# 2. Launch safe integration:
#    docker-compose -f docker/configs/safe-repository-integration.yml up -d
#
# 3. Monitor via dashboard:
#    open http://localhost:3011
#
# 4. Monitor logs in real-time:
#    docker logs -f safe-integration-agent
#    docker logs -f integration-boundary-monitor  
#    docker logs -f integration-compliance-monitor
#
# 5. Check violations:
#    docker logs integration-boundary-monitor | grep "VIOLATION"
#
# 6. Emergency controls:
#    docker pause safe-integration-agent                    # Pause immediately
#    ./docker/agents/safeguards/rollback-system.sh smart   # Smart rollback
#    ./docker/agents/safeguards/rollback-system.sh emergency # Nuclear option
#
# 7. After completion, move to next repository:
#    docker-compose -f docker/configs/safe-repository-integration.yml down
#    export TARGET_REPO=tdd_phase_4-executive-hooks
#    docker-compose -f docker/configs/safe-repository-integration.yml up -d