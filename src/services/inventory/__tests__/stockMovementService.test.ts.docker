import { SimplifiedSupabaseMock } from '../../../test/serviceSetup';
import { StockMovementService } from '../stockMovementService';
import { ValidationMonitor } from '../../../utils/validationMonitor';

// Mock ValidationMonitor
jest.mock('../../../utils/validationMonitor', () => ({
  ValidationMonitor: {
    recordValidationError: jest.fn(),
    recordPatternSuccess: jest.fn(),
    clear: jest.fn(),
  },
}));

describe('StockMovementService', () => {
  let mockSupabase: SimplifiedSupabaseMock;
  let service: StockMovementService;
  
  beforeEach(() => {
    jest.clearAllMocks();
    mockSupabase = new SimplifiedSupabaseMock();
    service = new StockMovementService(mockSupabase.client);
    ValidationMonitor.clear();
  });

  describe('recordMovement', () => {
    it('should create a stock movement record', async () => {
      const movementData = {
        inventoryItemId: '123e4567-e89b-12d3-a456-426614174000',
        movementType: 'in' as const,
        quantity: 100,
        referenceType: 'purchase_order',
        referenceId: '223e4567-e89b-12d3-a456-426614174001',
        reason: 'Stock replenishment',
        performedBy: '323e4567-e89b-12d3-a456-426614174001',
        notes: 'Received from supplier',
      };

      const mockCreated = {
        id: '423e4567-e89b-12d3-a456-426614174001',
        inventory_item_id: '123e4567-e89b-12d3-a456-426614174000',
        movement_type: 'in',
        quantity: 100,
        reference_type: 'purchase_order',
        reference_id: '223e4567-e89b-12d3-a456-426614174001',
        from_warehouse_id: null,
        to_warehouse_id: null,
        reason: 'Stock replenishment',
        performed_by: '323e4567-e89b-12d3-a456-426614174001',
        notes: 'Received from supplier',
        created_at: '2024-01-01T00:00:00Z',
      };

      mockSupabase.from('stock_movements').insert.mockReturnValue({
        select: jest.fn().mockReturnValue({
          single: jest.fn().mockResolvedValue({ data: mockCreated, error: null }),
        }),
      });

      const result = await service.recordMovement(movementData);

      expect(result.id).toBe('423e4567-e89b-12d3-a456-426614174001');
      expect(result.movementType).toBe('in');
      expect(result.quantity).toBe(100);
      expect(ValidationMonitor.recordPatternSuccess).toHaveBeenCalledWith('movement-record');
    });

    it('should handle errors when recording movement', async () => {
      const movementData = {
        inventoryItemId: '123e4567-e89b-12d3-a456-426614174000',
        movementType: 'out' as const,
        quantity: 50,
        performedBy: '323e4567-e89b-12d3-a456-426614174001',
      };

      const error = new Error('Database error');
      
      mockSupabase.from('stock_movements').insert.mockReturnValue({
        select: jest.fn().mockReturnValue({
          single: jest.fn().mockResolvedValue({ data: null, error }),
        }),
      });

      await expect(service.recordMovement(movementData))
        .rejects.toThrow('Database error');
      
      expect(ValidationMonitor.recordValidationError).toHaveBeenCalledWith('movement-record', error);
    });

    it('should validate movement data', async () => {
      const invalidData = {
        inventoryItemId: 'not-a-uuid',
        movementType: 'invalid-type' as any,
        quantity: -10,
        performedBy: 'not-a-uuid',
      };

      await expect(service.recordMovement(invalidData))
        .rejects.toThrow();
    });
  });

  describe('getMovementHistory', () => {
    it('should fetch movement history for an inventory item', async () => {
      const mockData = [
        {
          id: '423e4567-e89b-12d3-a456-426614174001',
          inventory_item_id: '123e4567-e89b-12d3-a456-426614174000',
          movement_type: 'in',
          quantity: 100,
          reference_type: null,
          reference_id: null,
          from_warehouse_id: null,
          to_warehouse_id: null,
          reason: 'Initial stock',
          performed_by: '323e4567-e89b-12d3-a456-426614174001',
          notes: null,
          created_at: '2024-01-01T00:00:00Z',
        },
        {
          id: '423e4567-e89b-12d3-a456-426614174002',
          inventory_item_id: '123e4567-e89b-12d3-a456-426614174000',
          movement_type: 'out',
          quantity: 30,
          reference_type: 'sales_order',
          reference_id: '523e4567-e89b-12d3-a456-426614174001',
          from_warehouse_id: null,
          to_warehouse_id: null,
          reason: 'Customer order',
          performed_by: '323e4567-e89b-12d3-a456-426614174002',
          notes: 'Express delivery',
          created_at: '2024-01-02T00:00:00Z',
        },
      ];

      mockSupabase.from('stock_movements').select.mockReturnValue({
        eq: jest.fn().mockReturnValue({
          order: jest.fn().mockResolvedValue({ data: mockData, error: null }),
        }),
      });

      const result = await service.getMovementHistory('123e4567-e89b-12d3-a456-426614174000');

      expect(result).toHaveLength(2);
      expect(result[0].movementType).toBe('in');
      expect(result[1].movementType).toBe('out');
      expect(ValidationMonitor.recordPatternSuccess).toHaveBeenCalledWith('movement-history');
    });

    it('should handle errors when fetching history', async () => {
      const error = new Error('Fetch failed');

      mockSupabase.from('stock_movements').select.mockReturnValue({
        eq: jest.fn().mockReturnValue({
          order: jest.fn().mockResolvedValue({ data: null, error }),
        }),
      });

      await expect(service.getMovementHistory('bad-id'))
        .rejects.toThrow('Fetch failed');
      
      expect(ValidationMonitor.recordValidationError).toHaveBeenCalledWith('movement-history', error);
    });

    it('should filter by date range if provided', async () => {
      const gteMock = jest.fn().mockReturnValue({
        lte: jest.fn().mockReturnValue({
          order: jest.fn().mockResolvedValue({ data: [], error: null }),
        }),
      });

      mockSupabase.from('stock_movements').select.mockReturnValue({
        eq: jest.fn().mockReturnValue({
          gte: gteMock,
        }),
      });

      await service.getMovementHistory(
        '123e4567-e89b-12d3-a456-426614174000',
        '2024-01-01T00:00:00Z',
        '2024-01-31T23:59:59Z'
      );

      expect(gteMock).toHaveBeenCalledWith('created_at', '2024-01-01T00:00:00Z');
    });
  });

  describe('batchRecordMovements', () => {
    it('should process multiple movements resiliently', async () => {
      const movements = [
        {
          inventoryItemId: '123e4567-e89b-12d3-a456-426614174001',
          movementType: 'in' as const,
          quantity: 50,
          performedBy: '323e4567-e89b-12d3-a456-426614174001',
        },
        {
          inventoryItemId: '123e4567-e89b-12d3-a456-426614174002',
          movementType: 'out' as const,
          quantity: 30,
          performedBy: '323e4567-e89b-12d3-a456-426614174001',
        },
      ];

      // First movement succeeds
      mockSupabase.from('stock_movements').insert.mockReturnValueOnce({
        select: jest.fn().mockReturnValue({
          single: jest.fn().mockResolvedValue({ 
            data: {
              id: '423e4567-e89b-12d3-a456-426614174001',
              inventory_item_id: '123e4567-e89b-12d3-a456-426614174001',
              movement_type: 'in',
              quantity: 50,
              reference_type: null,
              reference_id: null,
              from_warehouse_id: null,
              to_warehouse_id: null,
              reason: null,
              performed_by: '323e4567-e89b-12d3-a456-426614174001',
              notes: null,
              created_at: '2024-01-01T00:00:00Z',
            }, 
            error: null 
          }),
        }),
      });

      // Second movement succeeds
      mockSupabase.from('stock_movements').insert.mockReturnValueOnce({
        select: jest.fn().mockReturnValue({
          single: jest.fn().mockResolvedValue({ 
            data: {
              id: '423e4567-e89b-12d3-a456-426614174002',
              inventory_item_id: '123e4567-e89b-12d3-a456-426614174002',
              movement_type: 'out',
              quantity: 30,
              reference_type: null,
              reference_id: null,
              from_warehouse_id: null,
              to_warehouse_id: null,
              reason: null,
              performed_by: '323e4567-e89b-12d3-a456-426614174001',
              notes: null,
              created_at: '2024-01-01T00:00:00Z',
            }, 
            error: null 
          }),
        }),
      });

      const results = await service.batchRecordMovements(movements);

      expect(results).toHaveLength(2);
      expect(results[0].success).toBe(true);
      expect(results[1].success).toBe(true);
      expect(ValidationMonitor.recordPatternSuccess).toHaveBeenCalledWith('batch-movement');
    });

    it('should continue processing on individual failures', async () => {
      const movements = [
        {
          inventoryItemId: 'invalid-uuid',
          movementType: 'in' as const,
          quantity: 50,
          performedBy: '323e4567-e89b-12d3-a456-426614174001',
        },
        {
          inventoryItemId: '123e4567-e89b-12d3-a456-426614174002',
          movementType: 'out' as const,
          quantity: 30,
          performedBy: '323e4567-e89b-12d3-a456-426614174001',
        },
      ];

      // Second movement succeeds
      mockSupabase.from('stock_movements').insert.mockReturnValueOnce({
        select: jest.fn().mockReturnValue({
          single: jest.fn().mockResolvedValue({ 
            data: {
              id: '423e4567-e89b-12d3-a456-426614174002',
              inventory_item_id: '123e4567-e89b-12d3-a456-426614174002',
              movement_type: 'out',
              quantity: 30,
              reference_type: null,
              reference_id: null,
              from_warehouse_id: null,
              to_warehouse_id: null,
              reason: null,
              performed_by: '323e4567-e89b-12d3-a456-426614174001',
              notes: null,
              created_at: '2024-01-01T00:00:00Z',
            }, 
            error: null 
          }),
        }),
      });

      const results = await service.batchRecordMovements(movements);

      expect(results).toHaveLength(2);
      expect(results[0].success).toBe(false);
      expect(results[0].error).toBeDefined();
      expect(results[1].success).toBe(true);
      expect(ValidationMonitor.recordValidationError).toHaveBeenCalledWith('batch-movement', expect.any(Error));
    });
  });

  describe('getMovementsByType', () => {
    it('should fetch movements filtered by type', async () => {
      const mockData = [
        {
          id: '423e4567-e89b-12d3-a456-426614174001',
          inventory_item_id: '123e4567-e89b-12d3-a456-426614174001',
          movement_type: 'transfer',
          quantity: 50,
          reference_type: null,
          reference_id: null,
          from_warehouse_id: '323e4567-e89b-12d3-a456-426614174001',
          to_warehouse_id: '323e4567-e89b-12d3-a456-426614174002',
          reason: 'Warehouse rebalancing',
          performed_by: '323e4567-e89b-12d3-a456-426614174001',
          notes: null,
          created_at: '2024-01-01T00:00:00Z',
        },
      ];

      mockSupabase.from('stock_movements').select.mockReturnValue({
        eq: jest.fn().mockReturnValue({
          order: jest.fn().mockResolvedValue({ data: mockData, error: null }),
        }),
      });

      const result = await service.getMovementsByType('transfer');

      expect(result).toHaveLength(1);
      expect(result[0].movementType).toBe('transfer');
      expect(result[0].fromWarehouseId).toBe('323e4567-e89b-12d3-a456-426614174001');
      expect(result[0].toWarehouseId).toBe('323e4567-e89b-12d3-a456-426614174002');
    });
  });

  describe('getMovementsByUser', () => {
    it('should fetch movements performed by a specific user', async () => {
      const mockData = [
        {
          id: '423e4567-e89b-12d3-a456-426614174001',
          inventory_item_id: '123e4567-e89b-12d3-a456-426614174001',
          movement_type: 'adjustment',
          quantity: 5,
          reference_type: null,
          reference_id: null,
          from_warehouse_id: null,
          to_warehouse_id: null,
          reason: 'Inventory count correction',
          performed_by: '323e4567-e89b-12d3-a456-426614174001',
          notes: 'Physical count adjustment',
          created_at: '2024-01-01T00:00:00Z',
        },
      ];

      mockSupabase.from('stock_movements').select.mockReturnValue({
        eq: jest.fn().mockReturnValue({
          order: jest.fn().mockResolvedValue({ data: mockData, error: null }),
        }),
      });

      const result = await service.getMovementsByUser('323e4567-e89b-12d3-a456-426614174001');

      expect(result).toHaveLength(1);
      expect(result[0].performedBy).toBe('323e4567-e89b-12d3-a456-426614174001');
      expect(result[0].reason).toBe('Inventory count correction');
    });
  });

  describe('getMovementSummary', () => {
    it('should calculate movement summary statistics', async () => {
      const mockData = [
        {
          id: '423e4567-e89b-12d3-a456-426614174001',
          inventory_item_id: '123e4567-e89b-12d3-a456-426614174001',
          movement_type: 'in',
          quantity: 100,
          reference_type: null,
          reference_id: null,
          from_warehouse_id: null,
          to_warehouse_id: null,
          reason: null,
          performed_by: '323e4567-e89b-12d3-a456-426614174001',
          notes: null,
          created_at: '2024-01-01T00:00:00Z',
        },
        {
          id: '423e4567-e89b-12d3-a456-426614174002',
          inventory_item_id: '123e4567-e89b-12d3-a456-426614174001',
          movement_type: 'out',
          quantity: 30,
          reference_type: null,
          reference_id: null,
          from_warehouse_id: null,
          to_warehouse_id: null,
          reason: null,
          performed_by: '323e4567-e89b-12d3-a456-426614174001',
          notes: null,
          created_at: '2024-01-01T00:00:00Z',
        },
        {
          id: '423e4567-e89b-12d3-a456-426614174003',
          inventory_item_id: '123e4567-e89b-12d3-a456-426614174001',
          movement_type: 'out',
          quantity: 20,
          reference_type: null,
          reference_id: null,
          from_warehouse_id: null,
          to_warehouse_id: null,
          reason: null,
          performed_by: '323e4567-e89b-12d3-a456-426614174001',
          notes: null,
          created_at: '2024-01-02T00:00:00Z',
        },
      ];

      mockSupabase.from('stock_movements').select.mockReturnValue({
        eq: jest.fn().mockResolvedValue({ data: mockData, error: null }),
      });

      const result = await service.getMovementSummary('123e4567-e89b-12d3-a456-426614174001');

      expect(result.totalIn).toBe(100);
      expect(result.totalOut).toBe(50);
      expect(result.netChange).toBe(50);
      expect(result.movementCount).toBe(3);
      expect(ValidationMonitor.recordPatternSuccess).toHaveBeenCalledWith('movement-summary');
    });

    it('should handle empty movement history', async () => {
      mockSupabase.from('stock_movements').select.mockReturnValue({
        eq: jest.fn().mockResolvedValue({ data: [], error: null }),
      });

      const result = await service.getMovementSummary('123e4567-e89b-12d3-a456-426614174001');

      expect(result.totalIn).toBe(0);
      expect(result.totalOut).toBe(0);
      expect(result.netChange).toBe(0);
      expect(result.movementCount).toBe(0);
    });
  });

  describe('recordTransfer', () => {
    it('should record a transfer movement between warehouses', async () => {
      const transferData = {
        inventoryItemId: '123e4567-e89b-12d3-a456-426614174001',
        fromWarehouseId: '323e4567-e89b-12d3-a456-426614174001',
        toWarehouseId: '323e4567-e89b-12d3-a456-426614174002',
        quantity: 50,
        reason: 'Stock rebalancing',
        performedBy: '323e4567-e89b-12d3-a456-426614174001',
      };

      const mockCreated = {
        id: '423e4567-e89b-12d3-a456-426614174001',
        inventory_item_id: '123e4567-e89b-12d3-a456-426614174001',
        movement_type: 'transfer',
        quantity: 50,
        reference_type: null,
        reference_id: null,
        from_warehouse_id: '323e4567-e89b-12d3-a456-426614174001',
        to_warehouse_id: '323e4567-e89b-12d3-a456-426614174002',
        reason: 'Stock rebalancing',
        performed_by: '323e4567-e89b-12d3-a456-426614174001',
        notes: null,
        created_at: '2024-01-01T00:00:00Z',
      };

      mockSupabase.from('stock_movements').insert.mockReturnValue({
        select: jest.fn().mockReturnValue({
          single: jest.fn().mockResolvedValue({ data: mockCreated, error: null }),
        }),
      });

      const result = await service.recordTransfer(transferData);

      expect(result.movementType).toBe('transfer');
      expect(result.fromWarehouseId).toBe('323e4567-e89b-12d3-a456-426614174001');
      expect(result.toWarehouseId).toBe('323e4567-e89b-12d3-a456-426614174002');
      expect(ValidationMonitor.recordPatternSuccess).toHaveBeenCalledWith('movement-transfer');
    });
  });

  describe('getAdjustments', () => {
    it('should fetch only adjustment type movements', async () => {
      const mockData = [
        {
          id: '423e4567-e89b-12d3-a456-426614174001',
          inventory_item_id: '123e4567-e89b-12d3-a456-426614174001',
          movement_type: 'adjustment',
          quantity: -5,
          reference_type: null,
          reference_id: null,
          from_warehouse_id: null,
          to_warehouse_id: null,
          reason: 'Damaged items',
          performed_by: '323e4567-e89b-12d3-a456-426614174001',
          notes: 'Water damage in storage',
          created_at: '2024-01-01T00:00:00Z',
        },
      ];

      mockSupabase.from('stock_movements').select.mockReturnValue({
        eq: jest.fn().mockReturnValue({
          order: jest.fn().mockResolvedValue({ data: mockData, error: null }),
        }),
      });

      const result = await service.getAdjustments();

      expect(result).toHaveLength(1);
      expect(result[0].movementType).toBe('adjustment');
      expect(result[0].reason).toBe('Damaged items');
    });
  });
});