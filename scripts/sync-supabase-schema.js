#!/usr/bin/env node

/**
 * Script to sync Supabase schema and generate TypeScript types
 * Usage: node scripts/sync-supabase-schema.js
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// Load environment variables
require('dotenv').config();

const SUPABASE_PROJECT_REF = process.env.EXPO_PUBLIC_SUPABASE_URL?.match(/https:\/\/([^.]+)/)?.[1];

if (!SUPABASE_PROJECT_REF) {
  console.error('❌ Could not extract project reference from SUPABASE_URL');
  console.error('Make sure EXPO_PUBLIC_SUPABASE_URL is set in .env');
  process.exit(1);
}

console.log(`📦 Syncing schema for project: ${SUPABASE_PROJECT_REF}`);

try {
  // Generate TypeScript types using npx (no global installation needed)
  console.log('🔄 Generating TypeScript types from Supabase schema...');
  
  const outputPath = path.join(__dirname, '..', 'src', 'types', 'database.generated.ts');
  
  // Create types directory if it doesn't exist
  const typesDir = path.dirname(outputPath);
  if (!fs.existsSync(typesDir)) {
    fs.mkdirSync(typesDir, { recursive: true });
  }

  // Generate types using npx supabase CLI (no global install required)
  const command = `npx supabase gen types typescript --project-id ${SUPABASE_PROJECT_REF} --schema public`;
  console.log(`Running: ${command}`);
  
  const types = execSync(command, { encoding: 'utf-8', stdio: 'pipe' });
  
  // Add header comment
  const header = `/**
 * Auto-generated Supabase schema types
 * Generated on: ${new Date().toISOString()}
 * Project: ${SUPABASE_PROJECT_REF}
 * 
 * DO NOT EDIT THIS FILE DIRECTLY
 * Run 'npm run sync-schema' to update
 */

`;

  // Write to file
  fs.writeFileSync(outputPath, header + types);
  
  console.log(`✅ Schema types generated successfully at: ${outputPath}`);
  
  // Optional: Also pull migrations
  console.log('📁 Pulling database migrations...');
  try {
    const migrationCommand = `npx supabase db pull --linked`;
    console.log(`Running: ${migrationCommand}`);
    execSync(migrationCommand, { 
      stdio: 'inherit',
      cwd: path.join(__dirname, '..')
    });
    console.log('✅ Migrations pulled successfully');
  } catch (error) {
    console.warn('⚠️  Could not pull migrations. This is optional and the type generation was successful.');
    console.warn('   To pull migrations, you may need to link your project first:');
    console.warn(`   npx supabase link --project-ref ${SUPABASE_PROJECT_REF}`);
  }

  // Show summary of tables found
  const tableMatches = types.match(/Tables: {([^}]+)}/s);
  if (tableMatches) {
    const tables = tableMatches[1].match(/(\w+):/g)?.map(t => t.replace(':', ''));
    console.log('\n📊 Found tables:', tables?.join(', '));
  }

} catch (error) {
  console.error('❌ Error syncing schema:', error.message);
  process.exit(1);
}