
echo "🔍 Running comprehensive pre-commit validation..."
echo ""

# Step 1: Schema Contract Validation
echo "📋 Step 1: Checking schema contracts..."
npx tsc --noEmit src/schemas/__contracts__/schema-contracts.test.ts src/schemas/__contracts__/productAdmin.contracts.test.ts
if [ $? -ne 0 ]; then
  echo ""
  echo "❌ SCHEMA CONTRACTS FAILED"
  echo "   TypeScript compilation errors detected in schema contracts"
  echo "   This means schemas don't match their TypeScript interfaces"
  echo ""
  echo "🔧 How to fix:"
  echo "   1. Run: npm run validate:debug"
  echo "   2. Check schema transform functions"
  echo "   3. Ensure all interface fields are included"
  echo "   4. Match types exactly between schema and interface"
  echo "   5. For ProductAdmin: Check database.generated.ts alignment"
  echo ""
  exit 1
fi
echo "   ✅ Schema contracts passed (including ProductAdmin)"

# Step 2: Schema Pattern Validation  
echo ""
echo "📋 Step 2: Checking service patterns..."
npm run lint:schemas
if [ $? -ne 0 ]; then
  echo ""
  echo "❌ SCHEMA PATTERN VALIDATION FAILED"
  echo "   Service layer pattern violations detected"
  echo "   This usually means wrong field selections or missing validation"
  echo ""
  echo "🔧 How to fix:"
  echo "   1. Run: npm run lint:schemas:verbose"
  echo "   2. Check database.generated.ts for correct field names"
  echo "   3. Use exact database column names in .select() statements"
  echo "   4. Ensure services use Schema.parse() for validation"
  echo ""
  exit 1
fi
echo "   ✅ Service patterns passed"

# Step 3: TypeScript Check (Services Only)
echo ""
echo "📋 Step 3: Running TypeScript check on services..."
npx tsc --noEmit --skipLibCheck src/services/*.ts src/utils/broadcastFactory.ts
if [ $? -ne 0 ]; then
  echo ""
  echo "❌ SERVICES TYPESCRIPT COMPILATION FAILED"
  echo "   TypeScript errors detected in services directory"
  echo ""
  echo "🔧 How to fix:"
  echo "   1. Run: npx tsc --noEmit --skipLibCheck src/services/*.ts"
  echo "   2. Fix TypeScript compilation errors in services"
  echo "   3. Ensure all service imports and types are correct"
  echo ""
  exit 1
fi
echo "   ✅ Services TypeScript check passed"

# Step 4: Contract Test Coverage Check
echo ""
echo "📋 Step 4: Verifying contract test coverage..."
npx tsc --noEmit src/schemas/__contracts__/schema-contracts.test.ts src/schemas/__contracts__/failure-simulation.test.ts src/schemas/__contracts__/productAdmin.contracts.test.ts
if [ $? -ne 0 ]; then
  echo ""
  echo "❌ CONTRACT TEST COVERAGE FAILED"
  echo "   Some contract tests have violations"
  echo ""
  echo "🔧 How to fix:"
  echo "   1. Run: npm run test:contracts"
  echo "   2. Fix any contract test violations"
  echo "   3. Ensure all schemas have corresponding contract tests"
  echo "   4. For ProductAdmin: Verify database.generated.ts alignment"
  echo ""
  exit 1
fi
echo "   ✅ Contract test coverage passed (including ProductAdmin)"

echo ""
echo "🎉 ALL PRE-COMMIT VALIDATIONS PASSED"
echo ""
echo "✅ Schema contracts: All schemas match interfaces (including ProductAdmin)"
echo "✅ Service patterns: Field selections and validations correct"  
echo "✅ Services TypeScript: No compilation errors in services"
echo "✅ Contract coverage: All tests passing (including ProductAdmin)"
echo ""
echo "🔒 UI layer protection: Guaranteed clean, validated data"
echo "🛡️ Admin operations: Schema contract enforcement active"
echo ""
echo "Proceeding with commit..."